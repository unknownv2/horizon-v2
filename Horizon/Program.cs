#define ONLINE

using System;
using System.IO;
using System.Windows.Forms;
using System.Threading;
using DevComponents.DotNetBar;
using Horizon.Server;
using System.Reflection;
using Horizon.Functions;
using System.Diagnostics;
using System.Text;

namespace Horizon
{
    internal static class Program
    {
        private static Thread loadingLogo;
        private const string dllName = "dwmapi.dll";
        internal static bool doneLoading = false, shuttingDown = false;
        internal static string updateURL, updateVersion, updateBatch;

        [System.Runtime.InteropServices.DllImport(dllName, PreserveSig = false)]
        private static extern bool DwmIsCompositionEnabled();

        [STAThread] // Main entry point.
        private static void Main(string[] args)
        {
            var curPath = Path.GetDirectoryName(Process.GetCurrentProcess().Modules[0].FileName);

            var lzoPath = curPath + "\\lzo.dll";

            if (!File.Exists(lzoPath))
                return;

            if (File.ReadAllText(lzoPath, Encoding.ASCII).Hash(HashType.MD5) != "2bacecff26635bddd0e7ac81a90bff7c")
                return;

            var class3Path = curPath + "\\class3.dll";

            if (!File.Exists(class3Path))
                return;

            //if (File.ReadAllText(class3Path, Encoding.ASCII).Hash(HashType.MD5) != "f6e093c953230dd964c575fe77fcd51a")
                //return;
            //if(true)
            
            if (!doneLoading && (dllName + File.ReadAllText(Assembly.GetAssembly(typeof(Office2007Form)).Location, Encoding.ASCII)
                + File.ReadAllText(Assembly.GetAssembly(typeof(Ionic.Zlib.ZlibStream)).Location, Encoding.ASCII)
                + File.ReadAllText(Assembly.GetAssembly(typeof(ICSharpCode.SharpZipLib.SharpZipBaseException)).Location, Encoding.ASCII)
                + File.ReadAllText(Assembly.GetAssembly(typeof(System.Data.SQLite.SQLiteDataReader)).Location, Encoding.ASCII)).Hash(HashType.MD5)
                == "15d8443bf6c4a963c2f602c3df9db22d") 
            {
                Application.EnableVisualStyles();
                Application.SetCompatibleTextRenderingDefault(MessageBoxEx.EnableGlass = false);
                StyleManager.Style = eStyle.Office2010Silver;

                Config.initSettings();
                loadingLogo = new Thread((ThreadStart)delegate
                    {
                        new Forms.Splash(Properties.Resources.LoadingLogo);
                    });
                loadingLogo.Start();
                if (args.Length > 0)
                    Forms.Main.fixFiles(args);
                else
                {
#if ONLINE
                    var req = new Request("init", "?hz=1&init=1");
                    req.addParam("m", Security.getMachineIdent());
                    if (req.doRequest())
                    {
                        if (updateURL != null)
                        {
                            if (UI.messageBox("Horizon has an update! Would you like to download it now?\n\nYou must be using the latest version to use any Diamond tool.", "Program Update", MessageBoxIcon.Question, MessageBoxButtons.YesNo, MessageBoxDefaultButton.Button1) == DialogResult.Yes)
                            {
                                Process.Start(updateURL);
                                return;
                            }
                            Application.Run(new Forms.Main(String.Empty));
                        }
                    }
#if PROD || INT2
                    else
                        Application.Run(new Forms.Main(String.Empty));
#endif
#else
                    Application.Run(new Forms.Main(String.Empty));
#endif
                    ProfileManager.SaveCache();
                }
            }
        }

        internal static readonly bool isWindows7 =
            Environment.OSVersion.Platform == PlatformID.Win32NT
            && Environment.OSVersion.Version.Major >= 6
            && Environment.OSVersion.Version.Minor >= 1;

        internal static bool glassEnabled
        {
            get
            {
                if (Environment.OSVersion.Platform == PlatformID.Win32NT && Environment.OSVersion.Version.Major > 5)
                    return DwmIsCompositionEnabled();
                return false;
            }
        }

        // Call this function to abort the loading logo thread.
        internal static void killLoadingLogo()
        {
            if (loadingLogo.IsAlive)
                Forms.Splash.Alive = false;
        }

        // Runs a new instance of the Main form if a hash generated by the server checks out valid.
        internal static bool doXMLInit(System.Xml.XPath.XPathNavigator nav)
        {
            if ((Encoding.ASCII.GetString(Config.clientAES) + Security.getMachineIdent()).Hash(HashType.SHA1) == nav.Value)
            {
                nav.MoveToFirstAttribute();
                string val = nav.Value;
                nav.MoveToParent();
                Application.Run(new Forms.Main(val));
                return true;
            }
            return false;
        }
    }
}

namespace Runtime
{
    public static class Includes
    {
        public static string RuntimeDLL = "Horizon.dll";
    }
}